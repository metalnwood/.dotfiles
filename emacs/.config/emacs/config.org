#+TITLE:mw config
#+STARTUP: showeverything
#+OPTIONS: TOC:2

* Basic settings/package archives
#+begin_src emacs-lisp
    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
    			   ("org" . "https://orgmode.org/elpa/")
    			   ("elpa" . "https://elpa.gnu.org/packages/")))

    (setq inhibit-startup-message t)
    (setq use-package-always-ensure t)

    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (set-fringe-mode 10)
    (set-face-attribute 'default nil :font "Fira Code Retina" :height 210)
    (menu-bar-mode -1)
    (setq split-width-threshold 1)
    (setq visible-bell t)
    (setq user-full-name "Jason Harris"
    	user-mail-address "metalnwood@gmail.com")
    (setq display-line-numbers-type t)
    (setq display-line-numbers-type 'relative)
    (global-display-line-numbers-mode)
    (setq dired-kill-when-opening-new-dired-buffer nil)
;;    (add-to-list 'eglot-server-programs	
;;                '(c-mode . ("~/.config/emacs/.local/etc/lsp/clangd/clangd_15.0.6/bin/clangd" ))
;;  	      '(c++-mode . ("~/.config/emacs/.local/etc/lsp/clangd/clangd_15.0.6/bin/clangd" )))
;;
#+end_src

* Minibuffer vertico/marginalia/orderless 
#+begin_src emacs-lisp
    ;; Enable Vertico.
  (use-package vertico
    :ensure t
    :custom
    ;; (vertico-scroll-margin 0) ;; Different scroll margin
    ;; (vertico-count 20) ;; Show more candidates
    ;; (vertico-resize t) ;; Grow and shrink the Vertico minibuffer
    (vertico-cycle t) ;; Enable cycling for `vertico-next/previous'
    :init
    (vertico-mode))

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist 
    :ensure t
    :init
    (savehist-mode))

  ;; Emacs minibuffer configurations.
  (use-package emacs
    :custom
    ;; Support opening new minibuffers from inside existing minibuffers.
    (enable-recursive-minibuffers t)
    ;; Hide commands in M-x which do not work in the current mode.  Vertico
    ;; commands are hidden in normal buffers. This setting is useful beyond
    ;; Vertico.
    (read-extended-command-predicate #'command-completion-default-include-p)
    ;; Do not allow the cursor in the minibuffer prompt
    (minibuffer-prompt-properties
     '(read-only t cursor-intangible t face minibuffer-prompt)))
  ;; Optionally use the `orderless' completion style.
  (use-package orderless
    :ensure t
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
  
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :ensure t
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be activated in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src
* Lispy things  lispy/lispyville/sly
#+begin_src emacs-lisp
  (use-package lispy
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
    (add-hook 'lisp-mode-hook   (lambda () (lispy-mode 1))))


  (use-package rainbow-delimiters
    :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
  (use-package sly
    :ensure t)
  (setq inferior-lisp-program "/usr/bin/sbcl")
#+end_src

* General keys/which key/helpful

#+begin_src emacs-lisp
  (use-package general
      :ensure t
      :config

      (general-create-definer mw/leader-keys
        :states '( emacs)
        :keymaps 'override
        ;;:prefix "SPC"
        :global-prefix "M-SPC")

      (mw/leader-keys
        "b" '(:ignore t :wk "buffer")
        "bb" '(counsel-ibuffer :wk "Switch buffer")
        "bk" '(kill-this-buffer :wk "Kill buffer")
        "bn" '(next-buffer :wk "Next buffer")
        "bp" '(previous-buffer :wk "Previous buffer")
        "br" '(revert-buffer :wk "Reload buffer")
        "f" '(:ignore t :wk "file")
        "ff" '(counsel-find-file :wk "Find file")
        "fs" '(save-buffer :wk "Find file")
        "fc" '((lambda () (interactive) (find-file "~/.config/emacs/init.el")) :wk "Load init.el")
        )
    (use-package which-key
      :ensure t
      :init (which-key-mode)
      :diminish which-key-mode
      :config
      (setq which-key-idle-delay 0.3))
    (use-package helpful
      :ensure t
      :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
      :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))
#+end_src
* Themes

#+begin_src emacs-lisp
(use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (nerd-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))


  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))


  ;; first time this is run also need to run M-x all-the-icons-install-fonts
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

#+end_src

* Consult
#+begin_src emacs-lisp
    ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded by `use-package'.
    :ensure t
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Tweak the register preview for `consult-register-load',
    ;; `consult-register-store' and the built-in commands.  This improves the
    ;; register formatting, adds thin separator lines, register sorting and hides
    ;; the window mode line.
    (advice-add #'register-preview :override #'consult-register-window)
    (setq register-preview-delay 0.5)
    (setq  recentf-mode t)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep consult-man
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
  )
#+end_src

* Projectile/magit

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Projects/code")
      (setq projectile-project-search-path '("~/Projects/code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))


   (use-package magit
     :ensure t
     :custom
     (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
* Completion corfu/yassnippet

#+begin_src emacs-lisp
  ;; (use-package company
  ;;     :ensure t
  ;;     :init
  ;;     (add-hook 'after-init-hook 'global-company-mode))
  (use-package corfu
     :ensure t
     :init (global-corfu-mode))
  (setq corfu-auto   t
  	corfu-quit-no-match 'separator)
  (setq corfu-auto-delay .9)

  (use-package yasnippet
    :ensure t
    :init (yas-global-mode 1))
  (use-package yasnippet-snippets
    :ensure t)

#+end_src

* Utility avy
#+begin_src emacs-lisp
  (setq avy-keys '(?a ?o ?e ?u ?d ?h ?t ?n ?s))
  (use-package avy
    :ensure t
    :init
    (global-set-key (kbd "C-S-s") 'avy-goto-char-2))
#+end_src

* Custom functions
#+begin_src emacs-lisp
    (defun jason-center ()
     "zz but a bit higher than center"
     (interactive)
     (recenter)
     (scroll-up 8))

    (defun maw/down-ten-lines ()
      (interactive)
      (next-line 10))

  (defun maw/up-ten-lines ()
    (interactive)
    (previous-line 10))

  (defun maw/kill-to-beginning ()
    (interactive)
    (kill-line 0 ))

  (defun maw/vim-o ()
    (interactive)
    (move-end-of-line  1)
    (newline-and-indent))

#+end_src

* Key mappings
#+begin_src emacs-lisp
  (global-set-key  (kbd  "C-z")  #'jason-center)
;  (global-set-key  (kbd "M-RET")    #'er/expand-region)
  (global-set-key  (kbd "C-S-n")  #'maw/down-ten-lines)
  (global-set-key  (kbd "C-S-s")  #'avy-goto-char-2)
  (global-set-key  (kbd"C-S-p")  #'maw/up-ten-lines)
  (global-set-key  (kbd "C-S-k")  #'maw/kill-to-beginning)
  (global-set-key  (kbd"C-o")  #'maw/vim-o)
  (global-set-key  (kbd"M-z")  #'zap-up-to-char)
  
      (mw/leader-keys
        "b" '(:ignore t :wk "buffer")
        "bb" '(counsel-ibuffer :wk "Switch buffer")
        "bk" '(kill-this-buffer :wk "Kill buffer")
        "bn" '(next-buffer :wk "Next buffer")
        "bp" '(previous-buffer :wk "Previous buffer")
        "br" '(revert-buffer :wk "Reload buffer")
        "f" '(:ignore t :wk "file")
        "ff" '(counsel-find-file :wk "Find file")
        "fs" '(save-buffer :wk "Find file")
        "fc" '((lambda () (interactive) (find-file "~/.config/emacs/init.el")) :wk "Load init.el")
        ))
    (use-package which-key
      :ensure t
      :init (which-key-mode)
      :diminish which-key-mode
      :config
      (setq which-key-idle-delay 0.3))
    (use-package helpful
      :ensure t
      :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
      :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))
#+end_src

#+begin_src emacs-lisp
          (global-set-key  (kbd  "C-z")  #'jason-center)
        ;  (global-set-key  (kbd "M-RET")    #'er/expand-region)
          (global-set-key  (kbd "C-S-n")  #'maw/down-ten-lines)
          (global-set-key  (kbd "C-S-s")  #'avy-goto-char-2)
          (global-set-key  (kbd"C-S-p")  #'maw/up-ten-lines)
          (global-set-key  (kbd "C-S-k")  #'maw/kill-to-beginning)
          (global-set-key  (kbd"C-o")  #'maw/vim-o)
          (global-set-key  (kbd"M-S-d")  '(lambda ()
      				       (interactive)
    				       (left-word)
  				       (kill-word)))
          
#+end_src
* Misc Multiple cursors/ER Region/move text

#+begin_src emacs-lisp
  (use-package multiple-cursors
     :ensure t
     :bind 
  ( "C-S-c C-S-c" . 'mc/edit-lines)
  ( "C->"         . 'mc/mark-next-like-this)
  ( "C-<"     .  'mc/mark-previous-like-this)
  ( "C-c C-<" .  'mc/mark-all-like-this)
  ( "C-\""    .  'mc/skip-to-next-like-this)
  ( "C-:"     .  'mc/skip-to-previous-like-this)
  ( "C-M->" . 'mc/mark-all-dwim))


  (use-package expand-region
            :ensure t
            :bind
            ("C-=" . #'er/expand-region))
  (use-package move-text 
            :ensure t
  	  :config
  	      (move-text-default-bindings))

#+end_src




* eglot/lsp servers
#+begin_src emacs-lisp
  (use-package eglot
  :ensure t
  :config
     (add-to-list 'eglot-server-programs '(elixir-mode "~/code/elixir/elixir-ls/language_server.sh"))
  )
#+end_src

** elixir
   

   
* Language/treesitter     

#+begin_src emacs-lisp
  (use-package lua-mode
  :ensure t)
#+end_src

#+begin_src emacs-lisp
    (use-package
     emacs
     :ensure nil
     :custom

     ;; Should use:
     ;; (mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))
     ;; at least once per installation or while changing this list
     (treesit-language-source-alist
      '((heex "https://github.com/phoenixframework/tree-sitter-heex")
        (elixir "https://github.com/elixir-lang/tree-sitter-elixir")))

     (major-mode-remap-alist
      '((elixir-mode . elixir-ts-mode)))
    )
#+end_src

  #+begin_src emacs-lisp
    (use-package
     elixir-ts-mode
     :hook (elixir-ts-mode . eglot-ensure)
     (elixir-ts-mode
      .
      (lambda ()
        (push '(">=" . ?\u2265) prettify-symbols-alist)
        (push '("<=" . ?\u2264) prettify-symbols-alist)
        (push '("!=" . ?\u2260) prettify-symbols-alist)
        (push '("==" . ?\u2A75) prettify-symbols-alist)
        (push '("=~" . ?\u2245) prettify-symbols-alist)
        (push '("<-" . ?\u2190) prettify-symbols-alist)
        (push '("->" . ?\u2192) prettify-symbols-alist)
        (push '("<-" . ?\u2190) prettify-symbols-alist)
        (push '("|>" . ?\u25B7) prettify-symbols-alist)))
     (before-save . eglot-format))
 #+end_src
